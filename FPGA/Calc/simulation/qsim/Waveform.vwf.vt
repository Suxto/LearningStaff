// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2022 21:25:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Calc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Calc_vlg_sample_tst(
	A,
	B,
	CN,
	M,
	S,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input  CN;
input  M;
input [3:0] S;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CN or M or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Calc_vlg_check_tst (
	CN4,
	F,
	digOut,
	segOut,
	sampler_rx
);
input  CN4;
input [3:0] F;
input [7:0] digOut;
input [7:0] segOut;
input sampler_rx;

reg  CN4_expected;
reg [3:0] F_expected;
reg [7:0] digOut_expected;
reg [7:0] segOut_expected;

reg  CN4_prev;
reg [3:0] F_prev;
reg [7:0] digOut_prev;
reg [7:0] segOut_prev;

reg  CN4_expected_prev;
reg [3:0] F_expected_prev;
reg [7:0] digOut_expected_prev;
reg [7:0] segOut_expected_prev;

reg  last_CN4_exp;
reg [3:0] last_F_exp;
reg [7:0] last_digOut_exp;
reg [7:0] last_segOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	CN4_prev = CN4;
	F_prev = F;
	digOut_prev = digOut;
	segOut_prev = segOut;
end

// update expected /o prevs

always @(trigger)
begin
	CN4_expected_prev = CN4_expected;
	F_expected_prev = F_expected;
	digOut_expected_prev = digOut_expected;
	segOut_expected_prev = segOut_expected;
end



// expected CN4
initial
begin
	CN4_expected = 1'bX;
end 
// expected F[ 3 ]
initial
begin
	F_expected[3] = 1'bX;
end 
// expected F[ 2 ]
initial
begin
	F_expected[2] = 1'bX;
end 
// expected F[ 1 ]
initial
begin
	F_expected[1] = 1'bX;
end 
// expected F[ 0 ]
initial
begin
	F_expected[0] = 1'bX;
end 
// expected digOut[ 7 ]
initial
begin
	digOut_expected[7] = 1'bX;
end 
// expected digOut[ 6 ]
initial
begin
	digOut_expected[6] = 1'bX;
end 
// expected digOut[ 5 ]
initial
begin
	digOut_expected[5] = 1'bX;
end 
// expected digOut[ 4 ]
initial
begin
	digOut_expected[4] = 1'bX;
end 
// expected digOut[ 3 ]
initial
begin
	digOut_expected[3] = 1'bX;
end 
// expected digOut[ 2 ]
initial
begin
	digOut_expected[2] = 1'bX;
end 
// expected digOut[ 1 ]
initial
begin
	digOut_expected[1] = 1'bX;
end 
// expected digOut[ 0 ]
initial
begin
	digOut_expected[0] = 1'bX;
end 
// expected segOut[ 7 ]
initial
begin
	segOut_expected[7] = 1'bX;
end 
// expected segOut[ 6 ]
initial
begin
	segOut_expected[6] = 1'bX;
end 
// expected segOut[ 5 ]
initial
begin
	segOut_expected[5] = 1'bX;
end 
// expected segOut[ 4 ]
initial
begin
	segOut_expected[4] = 1'bX;
end 
// expected segOut[ 3 ]
initial
begin
	segOut_expected[3] = 1'bX;
end 
// expected segOut[ 2 ]
initial
begin
	segOut_expected[2] = 1'bX;
end 
// expected segOut[ 1 ]
initial
begin
	segOut_expected[1] = 1'bX;
end 
// expected segOut[ 0 ]
initial
begin
	segOut_expected[0] = 1'bX;
end 
// generate trigger
always @(CN4_expected or CN4 or F_expected or F or digOut_expected or digOut or segOut_expected or segOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CN4 = %b | expected F = %b | expected digOut = %b | expected segOut = %b | ",CN4_expected_prev,F_expected_prev,digOut_expected_prev,segOut_expected_prev);
	$display("| real CN4 = %b | real F = %b | real digOut = %b | real segOut = %b | ",CN4_prev,F_prev,digOut_prev,segOut_prev);
`endif
	if (
		( CN4_expected_prev !== 1'bx ) && ( CN4_prev !== CN4_expected_prev )
		&& ((CN4_expected_prev !== last_CN4_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CN4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CN4_expected_prev);
		$display ("     Real value = %b", CN4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CN4_exp = CN4_expected_prev;
	end
	if (
		( F_expected_prev[0] !== 1'bx ) && ( F_prev[0] !== F_expected_prev[0] )
		&& ((F_expected_prev[0] !== last_F_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[0] = F_expected_prev[0];
	end
	if (
		( F_expected_prev[1] !== 1'bx ) && ( F_prev[1] !== F_expected_prev[1] )
		&& ((F_expected_prev[1] !== last_F_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[1] = F_expected_prev[1];
	end
	if (
		( F_expected_prev[2] !== 1'bx ) && ( F_prev[2] !== F_expected_prev[2] )
		&& ((F_expected_prev[2] !== last_F_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[2] = F_expected_prev[2];
	end
	if (
		( F_expected_prev[3] !== 1'bx ) && ( F_prev[3] !== F_expected_prev[3] )
		&& ((F_expected_prev[3] !== last_F_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[3] = F_expected_prev[3];
	end
	if (
		( digOut_expected_prev[0] !== 1'bx ) && ( digOut_prev[0] !== digOut_expected_prev[0] )
		&& ((digOut_expected_prev[0] !== last_digOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[0] = digOut_expected_prev[0];
	end
	if (
		( digOut_expected_prev[1] !== 1'bx ) && ( digOut_prev[1] !== digOut_expected_prev[1] )
		&& ((digOut_expected_prev[1] !== last_digOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[1] = digOut_expected_prev[1];
	end
	if (
		( digOut_expected_prev[2] !== 1'bx ) && ( digOut_prev[2] !== digOut_expected_prev[2] )
		&& ((digOut_expected_prev[2] !== last_digOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[2] = digOut_expected_prev[2];
	end
	if (
		( digOut_expected_prev[3] !== 1'bx ) && ( digOut_prev[3] !== digOut_expected_prev[3] )
		&& ((digOut_expected_prev[3] !== last_digOut_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[3] = digOut_expected_prev[3];
	end
	if (
		( digOut_expected_prev[4] !== 1'bx ) && ( digOut_prev[4] !== digOut_expected_prev[4] )
		&& ((digOut_expected_prev[4] !== last_digOut_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[4] = digOut_expected_prev[4];
	end
	if (
		( digOut_expected_prev[5] !== 1'bx ) && ( digOut_prev[5] !== digOut_expected_prev[5] )
		&& ((digOut_expected_prev[5] !== last_digOut_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[5] = digOut_expected_prev[5];
	end
	if (
		( digOut_expected_prev[6] !== 1'bx ) && ( digOut_prev[6] !== digOut_expected_prev[6] )
		&& ((digOut_expected_prev[6] !== last_digOut_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[6] = digOut_expected_prev[6];
	end
	if (
		( digOut_expected_prev[7] !== 1'bx ) && ( digOut_prev[7] !== digOut_expected_prev[7] )
		&& ((digOut_expected_prev[7] !== last_digOut_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digOut_expected_prev);
		$display ("     Real value = %b", digOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digOut_exp[7] = digOut_expected_prev[7];
	end
	if (
		( segOut_expected_prev[0] !== 1'bx ) && ( segOut_prev[0] !== segOut_expected_prev[0] )
		&& ((segOut_expected_prev[0] !== last_segOut_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[0] = segOut_expected_prev[0];
	end
	if (
		( segOut_expected_prev[1] !== 1'bx ) && ( segOut_prev[1] !== segOut_expected_prev[1] )
		&& ((segOut_expected_prev[1] !== last_segOut_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[1] = segOut_expected_prev[1];
	end
	if (
		( segOut_expected_prev[2] !== 1'bx ) && ( segOut_prev[2] !== segOut_expected_prev[2] )
		&& ((segOut_expected_prev[2] !== last_segOut_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[2] = segOut_expected_prev[2];
	end
	if (
		( segOut_expected_prev[3] !== 1'bx ) && ( segOut_prev[3] !== segOut_expected_prev[3] )
		&& ((segOut_expected_prev[3] !== last_segOut_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[3] = segOut_expected_prev[3];
	end
	if (
		( segOut_expected_prev[4] !== 1'bx ) && ( segOut_prev[4] !== segOut_expected_prev[4] )
		&& ((segOut_expected_prev[4] !== last_segOut_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[4] = segOut_expected_prev[4];
	end
	if (
		( segOut_expected_prev[5] !== 1'bx ) && ( segOut_prev[5] !== segOut_expected_prev[5] )
		&& ((segOut_expected_prev[5] !== last_segOut_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[5] = segOut_expected_prev[5];
	end
	if (
		( segOut_expected_prev[6] !== 1'bx ) && ( segOut_prev[6] !== segOut_expected_prev[6] )
		&& ((segOut_expected_prev[6] !== last_segOut_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[6] = segOut_expected_prev[6];
	end
	if (
		( segOut_expected_prev[7] !== 1'bx ) && ( segOut_prev[7] !== segOut_expected_prev[7] )
		&& ((segOut_expected_prev[7] !== last_segOut_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segOut_expected_prev);
		$display ("     Real value = %b", segOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segOut_exp[7] = segOut_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Calc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg CN;
reg M;
reg [3:0] S;
// wires                                               
wire CN4;
wire [3:0] F;
wire [7:0] digOut;
wire [7:0] segOut;

wire sampler;                             

// assign statements (if any)                          
Calc i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CN(CN),
	.CN4(CN4),
	.F(F),
	.M(M),
	.S(S),
	.digOut(digOut),
	.segOut(segOut)
);
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// CN
initial
begin
	CN = 1'b1;
end 

// M
initial
begin
	M = 1'b0;
end 
// S[ 3 ]
initial
begin
	S[3] = 1'b1;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b1;
end 

Calc_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CN(CN),
	.M(M),
	.S(S),
	.sampler_tx(sampler)
);

Calc_vlg_check_tst tb_out(
	.CN4(CN4),
	.F(F),
	.digOut(digOut),
	.segOut(segOut),
	.sampler_rx(sampler)
);
endmodule

