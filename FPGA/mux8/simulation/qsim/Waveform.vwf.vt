// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2022 15:23:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux8_vlg_sample_tst(
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	select,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
input  E;
input  F;
input  G;
input  H;
input [2:0] select;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D or E or F or G or H or select)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux8_vlg_check_tst (
	andLogic,
	muxout,
	nandLogic,
	norLogic,
	notLogic,
	nxorLogic,
	orLogic,
	xorLogic,
	sampler_rx
);
input  andLogic;
input  muxout;
input  nandLogic;
input  norLogic;
input  notLogic;
input  nxorLogic;
input  orLogic;
input  xorLogic;
input sampler_rx;

reg  andLogic_expected;
reg  muxout_expected;
reg  nandLogic_expected;
reg  norLogic_expected;
reg  notLogic_expected;
reg  nxorLogic_expected;
reg  orLogic_expected;
reg  xorLogic_expected;

reg  andLogic_prev;
reg  muxout_prev;
reg  nandLogic_prev;
reg  norLogic_prev;
reg  notLogic_prev;
reg  nxorLogic_prev;
reg  orLogic_prev;
reg  xorLogic_prev;

reg  muxout_expected_prev;

reg  last_muxout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	andLogic_prev = andLogic;
	muxout_prev = muxout;
	nandLogic_prev = nandLogic;
	norLogic_prev = norLogic;
	notLogic_prev = notLogic;
	nxorLogic_prev = nxorLogic;
	orLogic_prev = orLogic;
	xorLogic_prev = xorLogic;
end

// update expected /o prevs

always @(trigger)
begin
	muxout_expected_prev = muxout_expected;
end



// expected muxout
initial
begin
	muxout_expected = 1'bX;
end 
// generate trigger
always @(andLogic_expected or andLogic or muxout_expected or muxout or nandLogic_expected or nandLogic or norLogic_expected or norLogic or notLogic_expected or notLogic or nxorLogic_expected or nxorLogic or orLogic_expected or orLogic or xorLogic_expected or xorLogic)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected andLogic = %b | expected muxout = %b | expected nandLogic = %b | expected norLogic = %b | expected notLogic = %b | expected nxorLogic = %b | expected orLogic = %b | expected xorLogic = %b | ",andLogic_expected_prev,muxout_expected_prev,nandLogic_expected_prev,norLogic_expected_prev,notLogic_expected_prev,nxorLogic_expected_prev,orLogic_expected_prev,xorLogic_expected_prev);
	$display("| real andLogic = %b | real muxout = %b | real nandLogic = %b | real norLogic = %b | real notLogic = %b | real nxorLogic = %b | real orLogic = %b | real xorLogic = %b | ",andLogic_prev,muxout_prev,nandLogic_prev,norLogic_prev,notLogic_prev,nxorLogic_prev,orLogic_prev,xorLogic_prev);
`endif
	if (
		( muxout_expected_prev !== 1'bx ) && ( muxout_prev !== muxout_expected_prev )
		&& ((muxout_expected_prev !== last_muxout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxout_expected_prev);
		$display ("     Real value = %b", muxout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_muxout_exp = muxout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
reg E;
reg F;
reg G;
reg H;
reg [2:0] select;
// wires                                               
wire andLogic;
wire muxout;
wire nandLogic;
wire norLogic;
wire notLogic;
wire nxorLogic;
wire orLogic;
wire xorLogic;

wire sampler;                             

// assign statements (if any)                          
mux8 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.H(H),
	.andLogic(andLogic),
	.muxout(muxout),
	.nandLogic(nandLogic),
	.norLogic(norLogic),
	.notLogic(notLogic),
	.nxorLogic(nxorLogic),
	.orLogic(orLogic),
	.select(select),
	.xorLogic(xorLogic)
);

// A
always
begin
	A = 1'b0;
	A = #50000 1'b1;
	#50000;
end 

// B
always
begin
	B = 1'b0;
	B = #25000 1'b1;
	#25000;
end 

// C
initial
begin
	C = 1'b1;
end 

// D
initial
begin
	D = 1'b0;
end 

// E
always
begin
	E = 1'b0;
	E = #100000 1'b1;
	#100000;
end 

// F
initial
begin
	repeat(6)
	begin
		F = 1'b0;
		F = #75000 1'b1;
		# 75000;
	end
	F = 1'b0;
	F = #75000 1'b1;
end 

// G
always
begin
	G = 1'b0;
	G = #25000 1'b1;
	#25000;
end 

// H
initial
begin
	H = 1'b0;
end 
// select[ 2 ]
initial
begin
	select[2] = 1'b1;
	select[2] = #800000 1'b0;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b0;
	select[1] = #400000 1'b1;
	select[1] = #400000 1'b0;
end 
// select[ 0 ]
initial
begin
	repeat(2)
	begin
		select[0] = 1'b0;
		select[0] = #200000 1'b1;
		# 200000;
	end
	select[0] = 1'b0;
end 

mux8_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.H(H),
	.select(select),
	.sampler_tx(sampler)
);

mux8_vlg_check_tst tb_out(
	.andLogic(andLogic),
	.muxout(muxout),
	.nandLogic(nandLogic),
	.norLogic(norLogic),
	.notLogic(notLogic),
	.nxorLogic(nxorLogic),
	.orLogic(orLogic),
	.xorLogic(xorLogic),
	.sampler_rx(sampler)
);
endmodule

